org: bushrataibani1
app: serverless-project-1
service: aws-node-project
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  environment:
    USERPOOL: !Ref CognitoUserPool
    SUPERADMINGROUP: !Ref SuperAdminGroup
    ADMINGROUP: !Ref AdminGroup
    STUDENTGROUP: !Ref StudentGroup
    CLIENTID: !Ref CognitoUserPoolClient
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminCreateUser"
        - "cognito-idp:AdminAddUserToGroup"
        - "cognito-idp:AdminSetUserPassword"
      Resource:
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool.UserPoolId}"
        - "*"
  httpApi:
    authorizers:
      cogauth:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          !Join [
            "",
            [
              "https://cognito-idp.${aws:region}.amazonaws.com/",
              !GetAtt CognitoUserPool.UserPoolId,
            ],
          ]
        audience:
          - !GetAtt CognitoUserPoolClient.ClientId

functions:
  syncDatabase:
    handler: functions/sync-database.handler
    package:
      include:
        - functions/sync-database.js
        - lib/init-sequelize.js
        - lib/sequelize-middleware.js
        - lib/models/**
      exclude:
        - "**/*"

  getTransportOrder:
    handler: functions/get-transport-order.handler
    package:
      include:
        - functions/get-transport-order.js
        - lib/**
      exclude:
        - "**/*"

  hw:
    handler: index.handler

  hello:
    handler: index.hello
    events:
      - httpApi:
          method: get
          path: /hello
          authorizer:
            name: cogauth

  createUser:
    handler: index.createUser
    events:
      - httpApi:
          method: post
          path: /createUser
          authorizer:
            name: cogauth

  transferUser:
    handler: index.transferUser
    events:
      - httpApi:
          method: post
          path: /transferUser
          authorizer:
            name: cogauth

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool-1
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client-1
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: true

    Domain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: bushra
        UserPoolId:
          Ref: CognitoUserPool

    SuperAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Super Admin
        GroupName: SuperAdminGroup
        Precedence: 0
        UserPoolId:
          Ref: CognitoUserPool

    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Admin
        GroupName: AdminGroup
        Precedence: 1

        UserPoolId:
          Ref: CognitoUserPool

    StudentGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Student
        GroupName: StudentGroup
        Precedence: 2
        UserPoolId:
          Ref: CognitoUserPool
